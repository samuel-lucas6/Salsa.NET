using Microsoft.VisualStudio.TestTools.UnitTesting;
using SalsaDotNet;

namespace SalsaDotNetTests;

[TestClass]
public class Salsa20Tests
{
    // https://github.com/das-labor/legacy/blob/master/microcontroller-2/arm-crypto-lib/testvectors/salsa20-256.64-verified.test-vectors
    // https://github.com/bcgit/bc-csharp/blob/master/crypto/test/src/crypto/test/Salsa20Test.cs
    
    // Set 1, vector#  0
    [TestMethod]
    [DataRow("8000000000000000000000000000000000000000000000000000000000000000", "0000000000000000", "E3BE8FDD8BECA2E3EA8EF9475B29A6E7")]
    [DataRow("8000000000000000000000000000000000000000000000000000000000000000", "0000000000000000", "E3BE8FDD8BECA2E3EA8EF9475B29A6E7003951E1097A5C38D23B7A5FAD9F6844B22C97559E2723C7CBBD3FE4FC8D9A0744652A83E72A9C461876AF4D7EF1A1178DA2B74EEF1B6283E7E20166ABCAE538E9716E4669E2816B6B20C5C356802001CC1403A9A117D12A2669F456366D")]
    [DataRow("8000000000000000000000000000000000000000000000000000000000000000", "0000000000000000", "E3BE8FDD8BECA2E3EA8EF9475B29A6E7003951E1097A5C38D23B7A5FAD9F6844B22C97559E2723C7CBBD3FE4FC8D9A0744652A83E72A9C461876AF4D7EF1A1178DA2B74EEF1B6283E7E20166ABCAE538E9716E4669E2816B6B20C5C356802001CC1403A9A117D12A2669F456366D6EBB0F1246F1265150F793CDB4B253E348AE203D89BC025E802A7E0E00621D70AA36B7E07CB1E7D5B38D5E222B8B0E4B8407")]
    public void TruncatedTestVectors(string key, string nonce, string stream)
    {
        Span<byte> k = Convert.FromHexString(key);
        Span<byte> n = Convert.FromHexString(nonce);
        Span<byte> s = Convert.FromHexString(stream);
        Span<byte> p = new byte[s.Length];
        Span<byte> c = new byte[p.Length];
        
        ulong counter = Salsa20.Encrypt(c, p, n, k);
        
        Assert.IsTrue(c.SequenceEqual(s));
        Assert.IsTrue(counter == (ulong)(-1L + s.Length + Salsa20.BlockSize) / Salsa20.BlockSize);
    }
    
    // Set 1, vector#  0
    // Set 1, vector#  9
    // Set 5, vector#  0
    // Set 5, vector#  9
    [TestMethod]
    [DataRow("8000000000000000000000000000000000000000000000000000000000000000", "0000000000000000", "E3BE8FDD8BECA2E3EA8EF9475B29A6E7003951E1097A5C38D23B7A5FAD9F6844B22C97559E2723C7CBBD3FE4FC8D9A0744652A83E72A9C461876AF4D7EF1A117", "57BE81F47B17D9AE7C4FF15429A73E10ACF250ED3A90A93C711308A74C6216A9ED84CD126DA7F28E8ABF8BB63517E1CA98E712F4FB2E1A6AED9FDC73291FAA17", "958211C4BA2EBD5838C635EDB81F513A91A294E194F1C039AEEC657DCE40AA7E7C0AF57CACEFA40C9F14B71A4B3456A63E162EC7D8D10B8FFB1810D71001B618", "696AFCFD0CDDCC83C7E77F11A649D79ACDC3354E9635FF137E929933A0BD6F5377EFA105A3A4266B7C0D089D08F1E855CC32B15B93784A36E56A76CC64BC8477")]
    [DataRow("0040000000000000000000000000000000000000000000000000000000000000", "0000000000000000", "01F191C3A1F2CC6EBED78095A05E062E1228154AF6BAE80A0E1A61DF2AE15FBCC37286440F66780761413F23B0C2C9E4678C628C5E7FB48C6EC1D82D47117D9F", "86D6F824D58012A14A19858CFE137D768E77597B96A4285D6B65D88A7F1A87784BF1A3E44FC9D3525DDC784F5D99BA222712420181CABAB00C4B91AAEDFF521C", "287A9DB3C4EEDCC96055251B73ED361BA727C2F326EF6944F9449FB7A3DDC396A88D9D0D853FADE365F82789D57F9B4010F963BC498F176A93FD51723FCD4D55", "E0D62E2E3B37FDD906C934FAA35D5E8A89A517DD0F24CF33DE8495C5FF24F4B1476B3E826A1C90D74507C3991CEF4067E316A04B97AEFFA5E9D1F33CB0609B9E")]
    [DataRow("0000000000000000000000000000000000000000000000000000000000000000", "8000000000000000", "2ABA3DC45B4947007B14C851CD694456B303AD59A465662803006705673D6C3E29F1D3510DFC0405463C03414E0E07E359F1F1816C68B2434A19D3EEE0464873", "EFF0C107DCA563B5C0048EB488B40341ED34052790475CD204A947EB480F3D753EF5347CEBB0A21F25B6CC8DE6B48906E604F554A6B01B23791F95C4A93A4717", "E3393E1599863B52DE8C52CF26C752FB473B74A34D6D9FE31E9CA8DD6292522F13EB456C5BE9E5432C06E1BA3965D45448936BC98376BF903969F049347EA05D", "FC4B2EF3B6B3815C99A437F16BDB06C5B948692786081D91C48CC7B072ABB901C0491CC6900F2FEA217BFFC70C43EDD665E3E020B59AAA43868E9949FBB9AE22")]
    [DataRow("0000000000000000000000000000000000000000000000000000000000000000", "0040000000000000", "F28343BCF4C946FC95DCAAED9DA10B277E573FC8EBC8CEE246FDDC533D29C2EA05451ED9A821C4161EE0AFA32EC0FCA0DAD124B702DA9248B3D2AA64489C9D26", "C65F799168D6B229D0281309526B746C490D3EDC0F6408A04339275FCE04BDF4656AB5868495C32D238FDB97869A9332E09CB7BE8031D38B8F565FB5469C8459", "03E48FD41282FCD62C7217ED64153E55B558F82A613245C3D8A885542346AA3927DE9734C0581338C3DE5DB443EC4227E3F82677D259D2D42601D187C79BF87A", "551F95AD9751E4F4BACE7FD48B6A3C67E86C4B1E5B747BA60377B07FE8365E09F8973085F8A6086FC56BD88168D8C5618B01B159EF29F658C85FD117925D46E0")]
    public void ShortTestVectors(string key, string nonce, string first, string second, string third, string fourth)
    {
        const int blockCount = 8;
        Span<byte> k = Convert.FromHexString(key);
        Span<byte> n = Convert.FromHexString(nonce);
        Span<byte> one = Convert.FromHexString(first);
        Span<byte> two = Convert.FromHexString(second);
        Span<byte> three = Convert.FromHexString(third);
        Span<byte> four = Convert.FromHexString(fourth);
        Span<byte> p = new byte[Salsa20.BlockSize * blockCount];
        Span<byte> c = new byte[p.Length];
        
        ulong counter = Salsa20.Encrypt(c, p, n, k);
        
        Assert.IsTrue(c[..64].SequenceEqual(one));
        Assert.IsTrue(c[192..256].SequenceEqual(two));
        Assert.IsTrue(c[256..320].SequenceEqual(three));
        Assert.IsTrue(c[448..512].SequenceEqual(four));
        Assert.IsTrue(counter == blockCount);
    }
    
    // Set 6, vector#  0
    // Set 6, vector#  1
    // Set 6, vector#  2
    // Set 6, vector#  3
    [TestMethod]
    [DataRow("0053A6F94C9FF24598EB3E91E4378ADD3083D6297CCF2275C81B6EC11467BA0D", "0D74DB42A91077DE", "F5FAD53F79F9DF58C4AEA0D0ED9A9601F278112CA7180D565B420A48019670EAF24CE493A86263F677B46ACE1924773D2BB25571E1AA8593758FC382B1280B71", "B70C50139C63332EF6E77AC54338A4079B82BEC9F9A403DFEA821B83F7860791650EF1B2489D0590B1DE772EEDA4E3BCD60FA7CE9CD623D9D2FD5758B8653E70", "81582C65D7562B80AEC2F1A673A9D01C9F892A23D4919F6AB47B9154E08E699B4117D7C666477B60F8391481682F5D95D96623DBC489D88DAA6956B9F0646B6E", "A13FFA1208F8BF50900886FAAB40FD10E8CAA306E63DF39536A1564FB760B242A9D6A4628CDC878762834E27A541DA2A5E3B3445989C76F611E0FEC6D91ACACC")]
    [DataRow("0558ABFE51A4F74A9DF04396E93C8FE23588DB2E81D4277ACD2073C6196CBF12", "167DE44BB21980E7", "3944F6DC9F85B128083879FDF190F7DEE4053A07BC09896D51D0690BD4DA4AC1062F1E47D3D0716F80A9B4D85E6D6085EE06947601C85F1A27A2F76E45A6AA87", "36E03B4B54B0B2E04D069E690082C8C592DF56E633F5D8C7682A02A65ECD13718CA4352AACCB0DA20ED6BBBA62E177F210E3560E63BB822C4158CAA806A88C82", "1B779E7A917C8C26039FFB23CF0EF8E08A1A13B43ACDD9402CF5DF38501098DFC945A6CC69A6A17367BC03431A86B3ED04B0245B56379BF997E25800AD837D7D", "7EC6DAE81A105E67172A0B8C4BBE7D06A7A8759F914FBEB1AF62C8A552EF4A4F56967EA29C7471F46F3B07F7A3746E953D315821B85B6E8CB40122B96635313C")]
    [DataRow("0A5DB00356A9FC4FA2F5489BEE4194E73A8DE03386D92C7FD22578CB1E71C417", "1F86ED54BB2289F0", "3FE85D5BB1960A82480B5E6F4E965A4460D7A54501664F7D60B54B06100A37FFDCF6BDE5CE3F4886BA77DD5B44E95644E40A8AC65801155DB90F02522B644023", "C8D6E54C29CA204018A830E266CEEE0D037DC47E921947302ACE40D1B996A6D80B598677F3352F1DAA6D9888F891AD95A1C32FFEB71BB861E8B07058515171C9", "B79FD776542B4620EFCB88449599F23403E74A6E91CACC50A05A8F8F3C0DEA8B00E1A5E6081F5526AE975B3BC0450F1A0C8B66F808F1904B971361137C93156F", "7998204FED70CE8E0D027B206635C08C8BC443622608970E40E3AEDF3CE790AEEDF89F922671B45378E2CD03F6F62356529C4158B7FF41EE854B1235373988C8")]
    [DataRow("0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C", "288FF65DC42B92F9", "5E5E71F90199340304ABB22A37B6625BF883FB89CE3B21F54A10B81066EF87DA30B77699AA7379DA595C77DD59542DA208E5954F89E40EB7AA80A84A6176663F", "2DA2174BD150A1DFEC1796E921E9D6E24ECF0209BCBEA4F98370FCE629056F64917283436E2D3F45556225307D5CC5A565325D8993B37F1654195C240BF75B16", "ABF39A210EEE89598B7133377056C2FEF42DA731327563FB67C7BEDB27F38C7C5A3FC2183A4C6B277F901152472C6B2ABCF5E34CBE315E81FD3D180B5D66CB6C", "1BA89DBD3F98839728F56791D5B7CE235036DE843CCCAB0390B8B5862F1E4596AE8A16FB23DA997F371F4E0AACC26DB8EB314ED470B1AF6B9F8D69DD79A9D750")]
    public void LongTestVectors(string key, string nonce, string first, string second, string third, string fourth)
    {
        const int blockCount = 2048;
        Span<byte> k = Convert.FromHexString(key);
        Span<byte> n = Convert.FromHexString(nonce);
        Span<byte> one = Convert.FromHexString(first);
        Span<byte> two = Convert.FromHexString(second);
        Span<byte> three = Convert.FromHexString(third);
        Span<byte> four = Convert.FromHexString(fourth);
        Span<byte> p = new byte[Salsa20.BlockSize * blockCount];
        Span<byte> c = new byte[p.Length];
        
        ulong counter = Salsa20.Encrypt(c, p, n, k);
        
        Assert.IsTrue(c[..64].SequenceEqual(one));
        Assert.IsTrue(c[65472..65536].SequenceEqual(two));
        Assert.IsTrue(c[65536..65600].SequenceEqual(three));
        Assert.IsTrue(c[131008..131072].SequenceEqual(four));
        Assert.IsTrue(counter == blockCount);
    }
    
    // Set 4, vector#  0
    // Set 4, vector#  1
    // Set 4, vector#  2
    // Set 4, vector#  3
    // Custom large counter tests based on Set 4, vector#  3
    [TestMethod]
    [DataRow("0053A6F94C9FF24598EB3E91E4378ADD3083D6297CCF2275C81B6EC11467BA0D", "0000000000000000", (ulong) 1023, "05BDA8EE240BA6DC53A42C14C17F620F6FA799A6BC88775E04EEF427B4B9DE5A5349327FCADA077F385BA321DB4B3939C0F49EA99801790B0FD32986AFC41B85")]
    [DataRow("0053A6F94C9FF24598EB3E91E4378ADD3083D6297CCF2275C81B6EC11467BA0D", "0000000000000000", (ulong) 1024, "FED5279620FBCBDD3C3980B11FCE4787E6F9F97772BEAAD0EF215FDCD0B3A16FBB56D72AFD5FD52E6A584BF840914168D04A594FFDDA959A63EB4CF42694F03F")]
    [DataRow("0053A6F94C9FF24598EB3E91E4378ADD3083D6297CCF2275C81B6EC11467BA0D", "0000000000000000", (ulong) 2047, "F161DCE8FA4CF80F8143DDB21FA1BFA31CA4DC0A412233EDE80EF72DAA1B80394BCE3875CA1E1E195D58BC3197F803A89C433A59A0718C1A009BCB4DA2AC1778")]
    [DataRow("0558ABFE51A4F74A9DF04396E93C8FE23588DB2E81D4277ACD2073C6196CBF12", "0000000000000000", (ulong) 1023, "EB2B0FD63C7EEEAA5A4D712EEEFC0A7E214BEB04D3FDA19C32250949868216D3A659B312E13EC66C5832E970F9C91FF94F7463439A9827ECCA52248D3CC604CD")]
    [DataRow("0558ABFE51A4F74A9DF04396E93C8FE23588DB2E81D4277ACD2073C6196CBF12", "0000000000000000", (ulong) 1024, "425E0DF93A3DE6B22E0871EB4E435691D77B5C471228DE302A79001F89F7E77D837C5CA0177B2206568EDC2EB0F169D56B414B9DCCDC928659B4BE1E0DEDFF73")]
    [DataRow("0558ABFE51A4F74A9DF04396E93C8FE23588DB2E81D4277ACD2073C6196CBF12", "0000000000000000", (ulong) 2047, "6AA3D6938B6B54B4CB8D2885274A991B4A0D5CCF35D981953EC64452FACC8640B5ACFA39A372E38BE4E10EE68E7F1B505A5660CDFBAE8DCBFCC9A3847BBB6BA4")]
    [DataRow("0A5DB00356A9FC4FA2F5489BEE4194E73A8DE03386D92C7FD22578CB1E71C417", "0000000000000000", (ulong) 1023, "F47FDFF047F0303F6CCE2510FA2475F07784D5F0FBD63D1746BD8CE4BB02802C3052A375D7DE75D439174E7B19CEBA3B9546DB027F14FFDB9EF542D5768CE5A7")]
    [DataRow("0A5DB00356A9FC4FA2F5489BEE4194E73A8DE03386D92C7FD22578CB1E71C417", "0000000000000000", (ulong) 1024, "40FEC0EE1697D63CB04299A17C446DE06B3407D10C6DD2143DFA24EB7362D09A6857C6AA83A191D65B05EBBBC8133D122BDE75900C86FCD8785EECE48659C3B0")]
    [DataRow("0A5DB00356A9FC4FA2F5489BEE4194E73A8DE03386D92C7FD22578CB1E71C417", "0000000000000000", (ulong) 2047, "7820087794D46993E984536E7B74C61567AB34C6C0A90090DB080E6EB79532FB414CD1145A781A2C55519A3E3AD19FA6D78790313EBE19A86F61068E4C8E508D")]
    [DataRow("0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C", "0000000000000000", (ulong) 1023, "15C415BE73C12230AC9505B92B2B12737F6FB2FAAF9C51F22ECCB8CBED36A27A1E0738E1252D26E8E5E5651FE8AA02CC9887D141A7CBAE80F01BE09B314005BB")]
    [DataRow("0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C", "0000000000000000", (ulong) 1024, "1C48158413F5EC5E64D2FA4786D91D2727DF6BECD614F6AE745CF2B6F35CD8243E5F1C440BEDE01E6C8A1145F2AB77FA24D634DE88F955D4F830D4A548A926D0")]
    [DataRow("0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C", "0000000000000000", (ulong) 2047, "A9BE2FB00C8BD01054153F77EC0C633CE8DF7F78E994907B9F387FF090CB3B954271FEADF50C9084106F4285FF4F534DAEC130AAE287D47033179BBAEEB36CE6")]
    [DataRow("0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C", "0000000000000000", (ulong) uint.MaxValue, "C5DE1A8BAE1090C0322A8316F26161CC9E878A5588837B55260B57151283EE7F7F1F858527FE361CBD040EDEF18A812E08A6D5023AB051B552DA0D0BE8F924DB")]
    [DataRow("0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C", "0000000000000000", (ulong) uint.MaxValue + 1, "0935B95A9B7F0E0889463E394F25F3F932FB6555FA30AA7D5479B5C9AD972B022E1018950AAE24CA920BCEA67218194FB3BCA90D87E3863EE45B662B77EFDEA6")]
    [DataRow("0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C", "0000000000000000", ulong.MaxValue, "9C42EB6E223052A61BC2C84ACB6EDA768F1F5AB7C90FA980A08B60DD72D1634E2AB090E8AF1FBF383423D82D51F80E16AAA0841455F1F773BCF30A661BC449CF")]
    public void CounterTestVectors(string key, string nonce, ulong counter, string stream)
    {
        Span<byte> k = Convert.FromHexString(key);
        Span<byte> n = Convert.FromHexString(nonce);
        Span<byte> s = Convert.FromHexString(stream);
        Span<byte> p = new byte[Salsa20.BlockSize];
        Span<byte> c = new byte[p.Length];
        
        ulong ctr = Salsa20.Encrypt(c, p, n, k, counter);
        
        Assert.IsTrue(c.SequenceEqual(s));
        Assert.IsTrue(ctr == counter + 1);
    }
}